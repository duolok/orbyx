import os
import sys
import xml.etree.ElementTree as ET
from django.utils.safestring import mark_safe
from django.http import HttpResponse, HttpRequest, JsonResponse
from django.shortcuts import render
from django.template import loader, Context

import pkg_resources

def index(request):
    template = loader.get_template('orbyx/index.html')
    return HttpResponse(template.render({}, request))

def get_data_source_plugins():
    return [ep.load() for ep in pkg_resources.iter_entry_points(group='orbyx_data_source_plugin')]

def get_visualizer_plugins():
    return [ep.load() for ep in pkg_resources.iter_entry_points(group='orbyx_visualizer_plugin')]

def get_engine():
    return next(pkg_resources.iter_entry_points('core')).load()

'''This will be replaced once action for applying data source and visualization are implemented.'''
def load_graph_from_plugin(request):
    data_sources = get_data_source_plugins()
    visualizers = get_visualizer_plugins()
    engine = get_engine()

    visualization = engine.send_data(None, "AYO")
    template = loader.get_template('orbyx/index.html')
    return HttpResponse(template.render({'main_view': mark_safe(visualization)}, request))

def load_plugins(oznaka):
    plugins = []
    for ep in pkg_resources.iter_entry_points(group=oznaka):
        p = ep.load()
        print("{} {}".format(ep.name, p))
        plugin = p()
        plugins.append(plugin)
    return plugins
def tree_view_data(request: HttpRequest):
    # wikipedia_data_source = load_plugins("orbyx_tinywiki")[0]
    # parsed_data = wikipedia_data_source.parse_data("some link will be here")
    # graph = wikipedia_data_source.get_graph(parsed_data)
    # nodes = graph.serialize_nodes()
    # edges = graph.serialize_edges()

    edges = ['{"source": {"id": 1, "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)", "name": "Rust (programming language)", "paragraphs": ["\\n", "Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety\\u2014meaning that all references point to valid memory\\u2014without a garbage collector. To simultaneously enforce memory safety and prevent data races, its \\"borrow checker\\" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming.[13][14][15]\\n", "Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel.\\n"], "children": 4}, "target": {"id": 5, "url": "https://en.wikipedia.org/wiki/Type_safety", "name": "Type safety", "paragraphs": ["In computer science, type safety and type soundness are the extent to which a programming language discourages or prevents type errors. Type safety is sometimes alternatively considered to be a property of facilities of a computer language; that is, some facilities are type-safe and their usage will not result in type errors, while other facilities in the same language may be type-unsafe and a program using them may encounter type errors. The behaviors classified as type errors by a given programming language are usually those that result from attempts to perform operations on values that are not of the appropriate data type, e.g., adding a string to an integer when there\'s no definition on how to handle this case. This classification is partly based on opinion.\\n", "Type enforcement can be static, catching potential errors at compile time, or dynamic, associating type information with values at run-time and consulting them as needed to detect imminent errors, or a combination of both.[1] Dynamic type enforcement often allows programs to run that would be invalid under static enforcement.\\n", "In the context of static (compile-time) type systems, type safety usually involves (among other things) a guarantee that the eventual value of any expression will be a legitimate member of that expression\'s static type. The precise requirement is more subtle than this \\u2014 see, for example, subtyping and polymorphism for complications.\\n"], "children": 0}, "value": null}', '{"source": {"id": 1, "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)", "name": "Rust (programming language)", "paragraphs": ["\\n", "Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety\\u2014meaning that all references point to valid memory\\u2014without a garbage collector. To simultaneously enforce memory safety and prevent data races, its \\"borrow checker\\" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming.[13][14][15]\\n", "Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel.\\n"], "children": 4}, "target": {"id": 3, "url": "https://en.wikipedia.org/wiki/General-purpose_programming_language", "name": "General-purpose programming language", "paragraphs": ["In computer software, a general-purpose programming language (GPL) is a programming language for building software in a wide variety of application domains. Conversely, a domain-specific programming language (DSL) is used within a specific area. For example, Python is a GPL, while SQL is a DSL for querying relational databases.\\n", "Early programming languages were designed for scientific computing (numerical calculations) or commercial data processing, as was computer hardware. Scientific languages such as Fortran and Algol supported floating-point calculations and multidimensional arrays, while business languages such as COBOL supported fixed-field file formats and data records. Much less widely used were specialized languages such as IPL-V and LISP for symbolic list processing; COMIT for string manipulation; APT for numerically controlled machines. Systems programming requiring pointer manipulation was typically done in assembly language, though JOVIAL was used for some military applications.[1]\\n", "IBM\'s System/360, announced in 1964, was designed as a unified hardware architecture supporting both scientific and commercial applications, and IBM developed PL/I for it as a single, general-purpose language that supported scientific, commercial, and systems programming. Indeed, a subset of PL/I was used as the standard systems programming language for the Multics operating system.\\n"], "children": 0}, "value": null}', '{"source": {"id": 1, "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)", "name": "Rust (programming language)", "paragraphs": ["\\n", "Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety\\u2014meaning that all references point to valid memory\\u2014without a garbage collector. To simultaneously enforce memory safety and prevent data races, its \\"borrow checker\\" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming.[13][14][15]\\n", "Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel.\\n"], "children": 4}, "target": {"id": 4, "url": "https://en.wikipedia.org/wiki/Computer_performance", "name": "Computer performance", "paragraphs": ["In computing, computer performance is the amount of useful work accomplished by a computer system. Outside of specific contexts, computer performance is estimated in terms of accuracy, efficiency and speed of executing computer program instructions. When it comes to high computer performance, one or more of the following factors might be involved:\\n", "The performance of any computer system can be evaluated in measurable, technical terms, using one or more of the metrics listed above. This way the performance can be\\n", "Whilst the above definition relates to a scientific, technical approach, the following definition given by Arnold Allen would be useful for a non-technical audience:\\n"], "children": 0}, "value": null}', '{"source": {"id": 1, "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)", "name": "Rust (programming language)", "paragraphs": ["\\n", "Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety\\u2014meaning that all references point to valid memory\\u2014without a garbage collector. To simultaneously enforce memory safety and prevent data races, its \\"borrow checker\\" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming.[13][14][15]\\n", "Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel.\\n"], "children": 4}, "target": {"id": 2, "url": "https://en.wikipedia.org/wiki/Programming_paradigm", "name": "Programming paradigm", "paragraphs": ["A programming paradigm is a relatively high-level way to structure and conceptualize the implementation of a computer program. A programming language can be classified as supporting one or more paradigms.[1]\\n", "Paradigms are separated along and described by different dimensions of programming. Some paradigms are about implications of the execution model, such as allowing side effects, or whether the sequence of operations is defined by the execution model. Other paradigms are about the way code is organized, such as grouping into units that include both state and behavior. Yet others are about syntax and grammar.\\n", "Some common programming paradigms include (shown in hierarchical relationship):[2][3][4]\\n"], "children": 0}, "value": null}']
    nodes = ['{"id": 1, "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)", "name": "Rust (programming language)", "paragraphs": ["\\n", "Rust is a multi-paradigm, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety\\u2014meaning that all references point to valid memory\\u2014without a garbage collector. To simultaneously enforce memory safety and prevent data races, its \\"borrow checker\\" tracks the object lifetime of all references in a program during compilation. Rust was influenced by ideas from functional programming, including immutability, higher-order functions, and algebraic data types. It is popular for systems programming.[13][14][15]\\n", "Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the Linux kernel.\\n"], "children": 4}', '{"id": 2, "url": "https://en.wikipedia.org/wiki/Programming_paradigm", "name": "Programming paradigm", "paragraphs": ["A programming paradigm is a relatively high-level way to structure and conceptualize the implementation of a computer program. A programming language can be classified as supporting one or more paradigms.[1]\\n", "Paradigms are separated along and described by different dimensions of programming. Some paradigms are about implications of the execution model, such as allowing side effects, or whether the sequence of operations is defined by the execution model. Other paradigms are about the way code is organized, such as grouping into units that include both state and behavior. Yet others are about syntax and grammar.\\n", "Some common programming paradigms include (shown in hierarchical relationship):[2][3][4]\\n"], "children": 0}', '{"id": 3, "url": "https://en.wikipedia.org/wiki/General-purpose_programming_language", "name": "General-purpose programming language", "paragraphs": ["In computer software, a general-purpose programming language (GPL) is a programming language for building software in a wide variety of application domains. Conversely, a domain-specific programming language (DSL) is used within a specific area. For example, Python is a GPL, while SQL is a DSL for querying relational databases.\\n", "Early programming languages were designed for scientific computing (numerical calculations) or commercial data processing, as was computer hardware. Scientific languages such as Fortran and Algol supported floating-point calculations and multidimensional arrays, while business languages such as COBOL supported fixed-field file formats and data records. Much less widely used were specialized languages such as IPL-V and LISP for symbolic list processing; COMIT for string manipulation; APT for numerically controlled machines. Systems programming requiring pointer manipulation was typically done in assembly language, though JOVIAL was used for some military applications.[1]\\n", "IBM\'s System/360, announced in 1964, was designed as a unified hardware architecture supporting both scientific and commercial applications, and IBM developed PL/I for it as a single, general-purpose language that supported scientific, commercial, and systems programming. Indeed, a subset of PL/I was used as the standard systems programming language for the Multics operating system.\\n"], "children": 0}', '{"id": 4, "url": "https://en.wikipedia.org/wiki/Computer_performance", "name": "Computer performance", "paragraphs": ["In computing, computer performance is the amount of useful work accomplished by a computer system. Outside of specific contexts, computer performance is estimated in terms of accuracy, efficiency and speed of executing computer program instructions. When it comes to high computer performance, one or more of the following factors might be involved:\\n", "The performance of any computer system can be evaluated in measurable, technical terms, using one or more of the metrics listed above. This way the performance can be\\n", "Whilst the above definition relates to a scientific, technical approach, the following definition given by Arnold Allen would be useful for a non-technical audience:\\n"], "children": 0}', '{"id": 5, "url": "https://en.wikipedia.org/wiki/Type_safety", "name": "Type safety", "paragraphs": ["In computer science, type safety and type soundness are the extent to which a programming language discourages or prevents type errors. Type safety is sometimes alternatively considered to be a property of facilities of a computer language; that is, some facilities are type-safe and their usage will not result in type errors, while other facilities in the same language may be type-unsafe and a program using them may encounter type errors. The behaviors classified as type errors by a given programming language are usually those that result from attempts to perform operations on values that are not of the appropriate data type, e.g., adding a string to an integer when there\'s no definition on how to handle this case. This classification is partly based on opinion.\\n", "Type enforcement can be static, catching potential errors at compile time, or dynamic, associating type information with values at run-time and consulting them as needed to detect imminent errors, or a combination of both.[1] Dynamic type enforcement often allows programs to run that would be invalid under static enforcement.\\n", "In the context of static (compile-time) type systems, type safety usually involves (among other things) a guarantee that the eventual value of any expression will be a legitimate member of that expression\'s static type. The precise requirement is more subtle than this \\u2014 see, for example, subtyping and polymorphism for complications.\\n"], "children": 0}']

    return JsonResponse({'nodes': nodes, 'edges':edges})

